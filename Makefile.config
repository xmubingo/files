## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# cuDNN acceleration switch (uncomment to build with cuDNN).
# USE_CUDNN := 1

# CPU-only switch (uncomment to build without GPU support).
# CPU_ONLY := 1
# uncomment to disable IO dependencies and corresponding data layers
# USE_LEVELDB := 0
# USE_LMDB := 0
# USE_OPENCV := 0
USE_MPI := 1

MY_HOME := /home/vis/lixubin
COMMON_HOME := /home/vis/lixubin/common

MPIPATH := /home/vis/env/other/openmpi
CUSTOM_CXX := $(MPIPATH)/bin/mpicxx

## serveral softwares
bin_dir:=/home/vis/lixubin/caffe-soft-bin
anaconda_home := $(bin_dir)/anaconda
boost_home := $(bin_dir)/boost
glog_home := $(bin_dir)/glog
gflags_home := $(bin_dir)/gflags
protobuf_home := $(bin_dir)/protobuf
leveldb_home := $(bin_dir)/leveldb
snappy_home := $(bin_dir)/snappy
hdf5_home := $(bin_dir)/hdf5
lmdb_home := $(bin_dir)/lmdb
opencv_home := $(bin_dir)/opencv-2.4.10
atlas_home := $(bin_dir)/atlas
mkl_home := /home/vis/intel/mkl
cudnn_home:=/home/vis/lixubin/cudnn/cudnn_v3 
combined_lib := $(anaconda_home)/lib \
				$(boost_home)/lib \
				$(COMMON_HOME)/lib \
				$(cudnn_home)/lib64 \
				$(glog_home)/lib \
				$(gflags_home)/lib \
				$(protobuf_home)/lib \
				$(leveldb_home)/lib \
				$(snappy_home)/lib \
				$(hdf5_home)/lib \
				$(lmdb_home)/lib \
				$(atlas_home)/lib \
				$(opencv_home)/lib \
				$(mkl_home)/lib/intel64 

combined_include := $(anaconda_home)/include \
					$(boost_home)/include $(boost_home)/include/boost $(cudnn_home)/include \
					$(COMMON_HOME)/include \
					$(glog_home)/include $(glog_home)/include/glog \
					$(gflags_home)/include $(gflags_home)/include/gflags \
					$(protobuf_home)/include/google/protobuf $(protobuf_home)/include $(protobuf_home)/include/google \
					$(leveldb_home)/include $(leveldb_home)/include/leveldb \
					$(snappy_home)/include $(snappy_home)/include/snappy \
					$(hdf5_home)/include \
					$(lmdb_home)/include \
					$(opencv_home)/include $(opencv_home)/include/opencv $(opencv_home)/include/opencv2 $(mkl_home)/include 

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
# CUSTOM_CXX := g++

# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR := /home/work/cuda-7.5
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them.
# For CUDA < 6.0, comment the *_50 lines for compatibility.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
		-gencode arch=compute_20,code=sm_21 \
		-gencode arch=compute_30,code=sm_30 \
		-gencode arch=compute_35,code=sm_35 \
		-gencode arch=compute_50,code=sm_50 \
		-gencode arch=compute_50,code=compute_50

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := mkl
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
#BLAS_INCLUDE := /usr/include
#BLAS_LIB := $(atlas_home)/lib
MKL_DIR := /home/vis/intel/mkl

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
MATLAB_DIR := $(COMMON_HOME)/MATLAB/R2013a

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
#PYTHON_INCLUDE := /home/vis/common/include/python2.7 \
		/home/vis/common/lib/python2.7/site-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
PYTHON_INCLUDE := $(anaconda_home)/include \
		$(anaconda_home)/include/python2.7 \
		$(anaconda_home)/lib/python2.7/site-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := $(anaconda_home)/lib
# PYTHON_LIB := $(ANACONDA_HOME)/lib

# Uncomment to support layers written in Python (will link against Python libs)
# This will require an additional dependency boost_regex provided by boost.
WITH_PYTHON_LAYER := 1

# Whatever else you find you need goes here.
INCLUDE_DIRS := /usr/local/include $(combined_include) $(PYTHON_INCLUDE)
LIBRARY_DIRS := /usr/local/lib /usr/lib $(combined_lib) $(PYTHON_LIB)

# Uncomment to use `pkg-config` to specify OpenCV library paths.
# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)
# USE_PKG_CONFIG := 1

BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0

# enable pretty build (comment to see full commands)
Q ?= @
